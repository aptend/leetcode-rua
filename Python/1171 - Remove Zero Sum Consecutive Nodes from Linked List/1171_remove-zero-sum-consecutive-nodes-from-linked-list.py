from leezy import solution, Solution
from leezy.assists import LinkedListContext, LinkedListNode

from collections import OrderedDict


class Q1171(Solution):
    @solution
    def removeZeroSumSublists(self, head):
        if not head:
            return None
        nodes = []
        while head:
            nodes.append(head.val)
            head = head.next

        prefix = {}
        accum = 0
        for i, x in enumerate(nodes):
            accum += x
            prefix[accum] = i

        ans = []
        # sum is 0 when there is no any value
        if 0 in prefix:
            i = prefix[0] + 1
        else:
            i = 0
        accum = 0
        while i < len(nodes):
            accum += nodes[i]
            ans.append(nodes[i])
            i = prefix[accum] + 1

        return LinkedListNode.make_linked_list(ans)

    @solution
    def remove_zero_subarray(self, head):
        # 36ms 99.77%
        dummy = head
        prefix = {}
        accum = 0
        while head:
            accum += head.val
            prefix[accum] = head
            head = head.next

        # sum is 0 when there is no any value
        if 0 in prefix:
            head = prefix[0].next
        else:
            head = dummy
        dummy = head
        accum = 0
        while head:
            accum += head.val
            head.next = prefix[accum].next
            head = head.next

        return dummy

    @solution
    def remove_zero_sub_one_pass(self, head):
        dummy = LinkedListNode(0)
        dummy.next = head
        prefix = OrderedDict()
        prefix[0] = dummy
        accum = 0
        # for instance, 1 2 3 -3 -2
        # 1 3 6 [3]
        # 1 3
        # 1 3 [1]
        # 1
        while head:
            accum += head.val
            if accum in prefix:
                prev_node = prefix[accum]
                # pop prefix sum that was generated by this 0-sum subarray
                while accum in prefix:
                    prefix.popitem()
                prefix[accum] = prev_node
                # delete
                prev_node.next = head.next
            else:
                prefix[accum] = head
            head = head.next

        return dummy.next


def main():
    q = Q1171()
    q.set_context(LinkedListContext)
    make = LinkedListNode.make_linked_list
    case = make([3, 1])
    q.add_case(q.case([3, 1, 2, 3, -3, -2]).assert_equal(case))
    q.add_case(q.case([1, 2, -3, 3, 1]).assert_equal(case))
    q.add_case(q.case([0, 0, 1, 2, -3, 3, 1]).assert_equal(case))
    q.add_case(q.case([1, 2, -3, 3, 0, 0, 1]).assert_equal(case))
    q.run()


if __name__ == '__main__':
    main()
